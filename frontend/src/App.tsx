import React, { useState } from 'react';
import axios from 'axios';
import './App.css';
export interface FootballGame {
    id: string;
    team1: string;
    team2: string;
    date: string;
    time: string;
}

function App() {
    const [selectedGame, setSelectedGame] = useState<FootballGame | null>(null);
    const [gameIdInput, setGameIdInput] = useState('');
    const [newGame, setNewGame] = useState<FootballGame>({
        id: '', // No need to provide an ID here, it will be generated by the backend
        team1: '',
        team2: '',
        date: '',
        time: '',
    });
    const [addedGame, setAddedGame] = useState<FootballGame | null>(null);
    const [addedGames, setAddedGames] = useState<FootballGame[]>([]); // New state for all added games

    const handleGameIdChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        setGameIdInput(event.target.value);
    };

    const handleGetGameById = () => {
        axios
            .get(`/api/games/${gameIdInput}`)
            .then((response) => {
                setSelectedGame(response.data);
            })
            .catch((error) => {
                console.log(error);
            });
    };

    const handleAddGame = () => {
        axios
            .post('/api/games', newGame)
            .then((response) => {
                const addedGameResponse: FootballGame = response.data;
                console.log('Game added:', addedGameResponse);
                setAddedGame(addedGameResponse);


                setAddedGames((prevAddedGames) => [...prevAddedGames, addedGameResponse]);

                setNewGame({
                    id: '',
                    team1: '',
                    team2: '',
                    date: '',
                    time: '',
                });
            })
            .catch((error) => {
                console.error('Error adding game:', error);
            });
    };

    const handleDeleteGame = () => {
        if (selectedGame) {
            axios
                .delete(`/api/games/${selectedGame.id}`)
                .then(() => {
                    console.log('Game deleted:', selectedGame.id);
                    setSelectedGame(null);
                })
                .catch((error) => {
                    console.error('Error deleting game:', error);
                });
        }
    };

    return (
        <div className="App">
            <h1>Football Games</h1>
            <h2>Game ID</h2>
            <div>
                <input
                    type="text"
                    placeholder="Enter game ID"
                    value={gameIdInput}
                    onChange={handleGameIdChange}
                />
                <button onClick={handleGetGameById}>Get Game</button>
            </div>
            {selectedGame && (
                <div>
                    <h2>Selected Game:</h2>
                    <p>ID: {selectedGame.id}</p>
                    <p>Team 1: {selectedGame.team1}</p>
                    <p>Team 2: {selectedGame.team2}</p>
                    <p>Date: {selectedGame.date}</p>
                    <p>Time: {selectedGame.time}</p>
                    <button onClick={handleDeleteGame}>Delete Game</button>
                </div>
            )}

            <div>
                <h2>Add New Game:</h2>
                <input
                    type="text"
                    placeholder="Team 1"
                    value={newGame.team1}
                    onChange={(e) => setNewGame({ ...newGame, team1: e.target.value })}
                />
                <input
                    type="text"
                    placeholder="Team 2"
                    value={newGame.team2}
                    onChange={(e) => setNewGame({ ...newGame, team2: e.target.value })}
                />
                <input
                    type="text"
                    placeholder="Date"
                    value={newGame.date}
                    onChange={(e) => setNewGame({ ...newGame, date: e.target.value })}
                />
                <input
                    type="text"
                    placeholder="Time"
                    value={newGame.time}
                    onChange={(e) => setNewGame({ ...newGame, time: e.target.value })}
                />
                <button onClick={handleAddGame}>Add Game</button>
            </div>

            <div className="added-game">
                <h2>Added Game:</h2>
                {addedGame && (
                    <div>
                        <p>ID: {addedGame.id}</p>
                        <p>Team 1: {addedGame.team1}</p>
                        <p>Team 2: {addedGame.team2}</p>
                        <p>Date: {addedGame.date}</p>
                        <p>Time: {addedGame.time}</p>
                    </div>
                )}
            </div>

            <div>
                <h2></h2>
                <button onClick={() => setAddedGame(null)}>Show All Games</button>
                {addedGames.map((game) => (
                    <div key={game.id}>
                        <p>ID: {game.id}</p>
                        <p>Team 1: {game.team1}</p>
                        <p>Team 2: {game.team2}</p>
                        <p>Date: {game.date}</p>
                        <p>Time: {game.time}</p>
                    </div>

                ))}
            </div>
        </div>
    );
}

export default App;
